{"remainingRequest":"/home/kostya/.nvm/versions/node/v12.3.1/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kostya/WebStorm/nortex-table/src/TablePagination.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/kostya/WebStorm/nortex-table/src/TablePagination.vue","mtime":1567407364481},{"path":"/home/kostya/.nvm/versions/node/v12.3.1/lib/node_modules/@vue/cli-service-global/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/kostya/.nvm/versions/node/v12.3.1/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kostya/.nvm/versions/node/v12.3.1/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    name: \"TablePagination\",\n    props: {\n        total_records: {\n            type: Number,\n            default: 0\n        },\n        current_page: {\n            type: Number,\n            default: 1,\n        },\n        current_per_page:{\n            type: Number,\n            default: 10,\n        },\n        labels: {\n            type: Object,\n            default: () => {}\n        }\n    },\n    data() {\n        return {\n            currentPage: this.current_page,\n            currentPerPage: this.current_per_page,\n            totalRecords: this.total_records,\n        }\n    },\n    watch:{\n        current_page(){\n            if (this.current_page < 1){\n                this.firstPage()\n            } else {\n                this.changePage(this.current_page);\n            }\n        },\n        current_per_page(){\n            this.currentPerPage = this.current_per_page\n        },\n        total_records(){\n            this.totalRecords = this.total_records;\n            if (this.current_page > this.pagesCount){\n                this.lastPage()\n            }\n        },\n        currentPage(){\n            this.pageChanged()\n        }\n    },\n    computed: {\n        infoText(){\n            return this.itemStart + ' - ' + this.itemEnd + ' ' + this.labels.of + ' ' + this.totalRecords\n        },\n        prevPages(){\n            let length = this.currentPage > 3 ? 2 : this.currentPage - 1;\n            return Array.from({ length: length }, (v, k) => this.currentPage - k - 1).reverse();\n        },\n        nextPages(){\n            let length = (this.pagesCount - this.currentPage) > 2 ? 2 : this.pagesCount - this.currentPage;\n            return Array.from({ length: length }, (v, k) => this.currentPage + k + 1);\n        },\n        nextIsDisabled() {\n            return this.currentPage === this.pagesCount;\n        },\n        prevIsDisabled() {\n            return this.currentPage === 1;\n        },\n        pagesCount() {\n            return Math.ceil(this.totalRecords / this.currentPerPage);\n        },\n        itemStart() {\n            if (this.totalRecords > 0) {\n                if (this.currentPage === 1) {\n                    return 1;\n                } else {\n                    return this.currentPage*this.currentPerPage - this.currentPerPage + 1;\n                }\n            } else {\n                return 0;\n            }\n        },\n        itemEnd() {\n            if (this.totalRecords < this.itemStart + this.currentPerPage - 1 ){\n                return this.totalRecords;\n            } else if (this.totalRecords > 0) {\n                return this.itemStart + this.currentPerPage - 1\n            } else {\n                return 0;\n            }\n        },\n    },\n    methods: {\n        nextPage() {\n            this.changePage(this.currentPage + 1);\n        },\n        previousPage() {\n            this.changePage(this.currentPage - 1);\n        },\n        firstPage() {\n            this.changePage(1);\n        },\n        lastPage() {\n            this.changePage(this.pagesCount);\n        },\n        changePage(number){\n            this.currentPage = number;\n        },\n        pageChanged() {\n            this.$emit('page-changed', {currentPage: this.currentPage});\n        },\n    }\n}\n",{"version":3,"sources":["TablePagination.vue"],"names":[],"mappingsfile":"TablePagination.vue","sourceRoot":"src","sourcesContent":["<template>\n    <div class=\"d-flex justify-content-between align-items-center mt-2\">\n        <div>{{ infoText }}</div>\n        <ul class=\"pagination\">\n            <li class=\"page-item\" :class=\"{ disabled: prevIsDisabled }\">\n                <a href=\"#\" class=\"page-link\" @click.prevent=\"firstPage\" v-tooltip=\"labels.first\">\n                    {{\"<<<\"}}\n                </a>\n            </li>\n            <li class=\"page-item\" :class=\"{ disabled: prevIsDisabled }\">\n                <a href=\"#\" class=\"page-link\" @click.prevent=\"previousPage\" v-tooltip=\"labels.prev\">\n                    {{\"<\"}}\n                </a>\n            </li>\n            <li class=\"page-item\" v-for=\"page in prevPages\" :key=\"page\">\n                <a href=\"#\" class=\"page-link\" @click.prevent=\"changePage(page)\">\n                    {{ page }}\n                </a>\n            </li>\n            <li class=\"page-item active\">\n                <a href=\"#\" class=\"page-link\" @click.prevent=\"\">\n                    {{ currentPage }}\n                </a>\n            </li>\n            <li class=\"page-item\" v-for=\"page in nextPages\" :key=\"page\">\n                <a href=\"#\" class=\"page-link\" @click.prevent=\"changePage(page)\">\n                    {{ page }}\n                </a>\n            </li>\n            <li class=\"page-item\" :class=\"{ disabled: nextIsDisabled }\">\n                <a class=\"page-link\" href=\"#\"\n                   @click.prevent=\"nextPage\"\n                   v-tooltip=\"labels.next\"\n                >\n                    {{\">\"}}\n                </a>\n            </li>\n            <li class=\"page-item\" :class=\"{ disabled: nextIsDisabled }\">\n                <a class=\"page-link\" href=\"#\" @click.prevent=\"lastPage\" v-tooltip=\"labels.last\">\n                    {{\">>>\"}}\n                </a>\n            </li>\n        </ul>\n    </div>\n</template>\n<script>\n    export default {\n        name: \"TablePagination\",\n        props: {\n            total_records: {\n                type: Number,\n                default: 0\n            },\n            current_page: {\n                type: Number,\n                default: 1,\n            },\n            current_per_page:{\n                type: Number,\n                default: 10,\n            },\n            labels: {\n                type: Object,\n                default: () => {}\n            }\n        },\n        data() {\n            return {\n                currentPage: this.current_page,\n                currentPerPage: this.current_per_page,\n                totalRecords: this.total_records,\n            }\n        },\n        watch:{\n            current_page(){\n                if (this.current_page < 1){\n                    this.firstPage()\n                } else {\n                    this.changePage(this.current_page);\n                }\n            },\n            current_per_page(){\n                this.currentPerPage = this.current_per_page\n            },\n            total_records(){\n                this.totalRecords = this.total_records;\n                if (this.current_page > this.pagesCount){\n                    this.lastPage()\n                }\n            },\n            currentPage(){\n                this.pageChanged()\n            }\n        },\n        computed: {\n            infoText(){\n                return this.itemStart + ' - ' + this.itemEnd + ' ' + this.labels.of + ' ' + this.totalRecords\n            },\n            prevPages(){\n                let length = this.currentPage > 3 ? 2 : this.currentPage - 1;\n                return Array.from({ length: length }, (v, k) => this.currentPage - k - 1).reverse();\n            },\n            nextPages(){\n                let length = (this.pagesCount - this.currentPage) > 2 ? 2 : this.pagesCount - this.currentPage;\n                return Array.from({ length: length }, (v, k) => this.currentPage + k + 1);\n            },\n            nextIsDisabled() {\n                return this.currentPage === this.pagesCount;\n            },\n            prevIsDisabled() {\n                return this.currentPage === 1;\n            },\n            pagesCount() {\n                return Math.ceil(this.totalRecords / this.currentPerPage);\n            },\n            itemStart() {\n                if (this.totalRecords > 0) {\n                    if (this.currentPage === 1) {\n                        return 1;\n                    } else {\n                        return this.currentPage*this.currentPerPage - this.currentPerPage + 1;\n                    }\n                } else {\n                    return 0;\n                }\n            },\n            itemEnd() {\n                if (this.totalRecords < this.itemStart + this.currentPerPage - 1 ){\n                    return this.totalRecords;\n                } else if (this.totalRecords > 0) {\n                    return this.itemStart + this.currentPerPage - 1\n                } else {\n                    return 0;\n                }\n            },\n        },\n        methods: {\n            nextPage() {\n                this.changePage(this.currentPage + 1);\n            },\n            previousPage() {\n                this.changePage(this.currentPage - 1);\n            },\n            firstPage() {\n                this.changePage(1);\n            },\n            lastPage() {\n                this.changePage(this.pagesCount);\n            },\n            changePage(number){\n                this.currentPage = number;\n            },\n            pageChanged() {\n                this.$emit('page-changed', {currentPage: this.currentPage});\n            },\n        }\n    }\n</script>"]}]}