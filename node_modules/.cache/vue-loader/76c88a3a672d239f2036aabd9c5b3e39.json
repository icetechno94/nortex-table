{"remainingRequest":"/home/kostya/.nvm/versions/node/v12.3.1/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kostya/WebStorm/nortex-table/src/TableColumn.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/kostya/WebStorm/nortex-table/src/TableColumn.vue","mtime":1567406839518},{"path":"/home/kostya/.nvm/versions/node/v12.3.1/lib/node_modules/@vue/cli-service-global/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/kostya/.nvm/versions/node/v12.3.1/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kostya/.nvm/versions/node/v12.3.1/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    name: \"TableColumn\",\n    props: {\n        columns: Array,\n        columns_row: {\n            type: Number,\n            default: 1\n        },\n        enable_sort: {\n            type: Boolean,\n            default: true\n        },\n        sort_by: {\n            type: String,\n            default: 'created_at'\n        },\n        sort_type: {\n            type: String,\n            default: 'desc'\n        }\n    },\n    data() {\n        return {\n            sortBy: this.sort_by,\n            sortType: this.sort_type\n        }\n    },\n    watch: {\n        sort_by(){\n            this.sortBy = this.sort_by\n        },\n        sort_type(){\n            this.sortType = this.sort_type\n        },\n        sortBy(){\n            this.sortChanged();\n        },\n        sortType(){\n            this.sortChanged();\n        }\n    },\n    computed: {\n        mainColumns(){\n            let that = this,\n                data = [];\n            this.columns.map((column) => {\n                column['rowspan'] = column.children && column.children.length === 0 ? that.columns_row : null;\n                column['colspan'] = column.children && column.children.length > 0 ? column.children.length : null;\n                column['class'] = [{'text-center': column.children && column.children.length > 0}, that.sortingClass(column)]\n                data.push(column)\n            });\n            return data\n        },\n        childrenColumns(){\n            let data = [];\n            this.columns.map((column)=> {\n                if (column.children && column.children.length > 0) {\n                    column.children.map((child_column)=>{data.push(child_column)});\n                }\n            });\n            return data;\n        },\n        isDesc(){\n            return this.sortType === 'desc'\n        },\n        isAsc(){\n            return this.sortType === 'asc'\n        }\n    },\n    methods: {\n        revertSortType(){\n            this.sortType = this.isAsc ? 'desc' : 'asc'\n        },\n        sortingClass(column) {\n            return {\n                sorting: column.sortable && this.enable_sort,\n                asc: column.sortable && this.sortBy === column.field && this.isAsc,\n                desc: column.sortable && this.sortBy === column.field && this.isDesc,\n            }\n\n        },\n        changeSort(field){\n            if (this.enable_sort && field !== 'actions'){\n                if (field === this.sortBy){\n                    this.revertSortType();\n                } else {\n                    this.sortBy = field;\n                    this.sortType = 'asc'\n                }\n            }\n        },\n        sortChanged(){\n            if(this.enable_sort){\n                this.$emit('sort-changed', {sortBy: this.sortBy, sortType: this.sortType})\n            }\n        }\n    }\n}\n",{"version":3,"sources":["TableColumn.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TableColumn.vue","sourceRoot":"src","sourcesContent":["<template>\n    <thead>\n        <tr>\n            <th v-for=\"column in mainColumns\"\n                :key=\"column.field\"\n                :rowspan=\"column.rowspan\"\n                :colspan=\"column.colspan\"\n                :class=\"column.class\"\n                @click=\"changeSort(column.field)\"\n            >\n                <span>\n                    {{column.label}}\n                    <i class=\"icon-question ml-1\" v-if=\"column.title\" v-tooltip=\"column.title\"></i>\n                </span>\n            </th>\n        </tr>\n        <tr>\n            <th v-for=\"column in childrenColumns\"\n                :key=\"column.field\"\n                :class=\"sortingClass(column)\"\n                @click=\"changeSort(column.field)\"\n            >\n                <span>\n                    {{column.label}}\n                    <i class=\"icon-question ml-1\" v-if=\"column.title\" v-tooltip=\"column.title\"></i>\n                </span>\n            </th>\n        </tr>\n    </thead>\n</template>\n\n<script>\n    export default {\n        name: \"TableColumn\",\n        props: {\n            columns: Array,\n            columns_row: {\n                type: Number,\n                default: 1\n            },\n            enable_sort: {\n                type: Boolean,\n                default: true\n            },\n            sort_by: {\n                type: String,\n                default: 'created_at'\n            },\n            sort_type: {\n                type: String,\n                default: 'desc'\n            }\n        },\n        data() {\n            return {\n                sortBy: this.sort_by,\n                sortType: this.sort_type\n            }\n        },\n        watch: {\n            sort_by(){\n                this.sortBy = this.sort_by\n            },\n            sort_type(){\n                this.sortType = this.sort_type\n            },\n            sortBy(){\n                this.sortChanged();\n            },\n            sortType(){\n                this.sortChanged();\n            }\n        },\n        computed: {\n            mainColumns(){\n                let that = this,\n                    data = [];\n                this.columns.map((column) => {\n                    column['rowspan'] = column.children && column.children.length === 0 ? that.columns_row : null;\n                    column['colspan'] = column.children && column.children.length > 0 ? column.children.length : null;\n                    column['class'] = [{'text-center': column.children && column.children.length > 0}, that.sortingClass(column)]\n                    data.push(column)\n                });\n                return data\n            },\n            childrenColumns(){\n                let data = [];\n                this.columns.map((column)=> {\n                    if (column.children && column.children.length > 0) {\n                        column.children.map((child_column)=>{data.push(child_column)});\n                    }\n                });\n                return data;\n            },\n            isDesc(){\n                return this.sortType === 'desc'\n            },\n            isAsc(){\n                return this.sortType === 'asc'\n            }\n        },\n        methods: {\n            revertSortType(){\n                this.sortType = this.isAsc ? 'desc' : 'asc'\n            },\n            sortingClass(column) {\n                return {\n                    sorting: column.sortable && this.enable_sort,\n                    asc: column.sortable && this.sortBy === column.field && this.isAsc,\n                    desc: column.sortable && this.sortBy === column.field && this.isDesc,\n                }\n\n            },\n            changeSort(field){\n                if (this.enable_sort && field !== 'actions'){\n                    if (field === this.sortBy){\n                        this.revertSortType();\n                    } else {\n                        this.sortBy = field;\n                        this.sortType = 'asc'\n                    }\n                }\n            },\n            sortChanged(){\n                if(this.enable_sort){\n                    this.$emit('sort-changed', {sortBy: this.sortBy, sortType: this.sortType})\n                }\n            }\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>"]}]}